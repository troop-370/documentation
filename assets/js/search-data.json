{
  "0": {
    "id": "0",
    "title": "Content Strips",
    "content": "Content Strips What are they? Basic usage HTML structure Guidelines Variants Standard Primary background Secondary background Extra padding Reduced padding Centered Title Style customization CSS classes What are they? Content strips are used to organize and group information. Every element used on the website must be placed on a content strip so it can be properly styled and displayed to users. Organize elements into content strips so that only similar content shares a strip. Basic usage HTML structure &lt;div class=&quot;content-strip&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;!-- ... content ... --&gt; &lt;/div&gt; &lt;/div&gt; Guidelines When content strips of the same background color are used adjacent to each other, apply the class .content-strip--no-bottom-padding to all but the last content strip of that color. Content Strips that are centered should not contain elements other than a title and a paragraph. Do not use buttons, images, graphs, or multiple paragraphs. The first content strip at the top of the page should contain the page title and, if applicable, a small description or introduction to the page. Additionally, the background should be the website’s primary color and the contents of the content strip should be centered. This style of content strip should only be used in this fashion. Variants Standard Primary background Secondary background Extra padding Reduced padding Centered Title Style customization CSS classes CSS class Description content-strip–primary Sets the background of the content strip to the primary color. Text color also adjusts to white to be legible on a dark background. content-strip–secondary Sets the background of the content strip to the secondary color. Text color also adjusts to white to be legible on a dark background. content-strip–center Horizontally centers the contents of the content strip. content-strip–extra-padding Adds extra vertical padding to the content strip content-strip–reduced-padding Removes excess vertical padding from the content strip. content-strip–no-bottom-padding Removes bottom padding from the content strip. Should only be used when followed by another content strip of the same color background.",
    "url": "/ui-components/content-strip.html",
    "relUrl": "/ui-components/content-strip.html"
  },
  "1": {
    "id": "1",
    "title": "Getting Started",
    "content": "Getting started Getting started GitHub Required programs GitHub Desktop Atom npm Ruby Jekyll GitHub Troop 370 hosts most of its website files on GitHub, so you will need a GitHub account. If you do not have an account, you can create one on the signup page. Required programs To contribute to the Troop 370 website, you are going to need several programs: GitHub Desktop Atom (other text editors also work) Ruby Jekyll GitHub Desktop GitHub Desktop is the program that enables you to work on the website files locally rather than in the browser. This allows your workflow to be quicker and easier by allowing you to edit multiple files and before publishing them to the web. Follow the following steps: Download and install GitHub Desktop from desktop.github.com. Once installed, open GitHub Desktop. Choose Sign in to GitHub.com, enter your credentials. and click Sign in. On the Configure Git page, make sure that your name is your first and last name and that your email is the same email you used for your GitHub account. Clone the troop website repository to your desktop by clicking here. If your browser asks if you are trying to open GitHub Desktop, accept the prompt. GitHub Desktop will open a modal titled “Clone a repository”. If desired, you can change the local path of the files that are about to be cloned to your computer. Click Clone to download the entire repository to your computer. Atom Atom is a text editor with direct integration with GitHub. It is the easiest way for you to modify website files and manage your changes before publishing them to GitHub. Download and install Atom from atom.io. Once installed, open Atom. Got to File &gt; Add Project Folder and select the folder of the troop website repository (usually named troop370) from where you saved it when setting up GitHub Desktop. You should now see the project pane on the left side with all of the site files. npm Download and install npm from npmjs.com/get-npm. Open PowerShell from the root of the troop370 repository by opening GitHub Desktop, selecting the troop370 repository from the Current repository dropdown, and go to Repository &gt; Open in PowerShell. Type npm install. Required external libraries will now be installed. Ruby Download Ruby for windows from rubyinstaller.org. Choose version Ruby+Devkit 2.5.5 (x64). Open the installer and keep pressing next to install Ruby. Do not change any of the default checked boxes. When the install is complete, check the checkbox to run ‘ridk install’ and click Finish. When command prompt opens that is labelled “Ruby Installer 2 for Windows” and the prompt “Which components shall be installed? If unsure press ENTER [1,2,3]” appears, press ENTER. Jekyll Jekyll is the program that builds the website. You will use Jekyll when you are working on the website to test your changes locally before publishing to the live website. Open PowerShell from the root of the troop370 repository by opening GitHub Desktop, selecting the troop370 repository from the Current repository dropdown, and go to Repository &gt; Open in PowerShell. Type gem install bundler to install Bundler (installs the gems/plugins needed for the website). Run bundler install to install the exact versions of Jekyll and of the gems used for building the website. Check if Jekyll installed properly with jekyll -v. Type jekyll serve to build the website. If it works, you should be able to access it in your browser at localhost:4000.",
    "url": "/getting-started.html",
    "relUrl": "/getting-started.html"
  },
  "2": {
    "id": "2",
    "title": "Home",
    "content": "Welcome to the BSA Troop 370 Website Documentation Page",
    "url": "/",
    "relUrl": "/"
  },
  "3": {
    "id": "3",
    "title": "Typography",
    "content": "Typography General information Basic usage HTML structure within content strips (always use this) HTML structure without content strip Guidelines Style customization CSS classes General information Troop 370 uses the material design components (MDC) typography system. MDC Typography has thirteen styles: Headline 1 Headline 2 Headline 3 Headline 4 Headline 5 Headline 6 Subtitle 1 Subtitle 2 Body 1 Body 2 Caption Button Overline Basic usage HTML structure within content strips (always use this) &lt;div class=&quot;content-strip&quot;&gt; &lt;div class=&quot;flex-item&quot;&gt; &lt;h1&gt;Heading&lt;/h1&gt; &lt;p&gt;Paragraph Text&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; HTML structure without content strip Avoid using typography outside of content strips unless absolutely necessary. Typography outside of content strips will not be aligned and scaled to best fit the user’s screen. &lt;body class=&quot;mdc-typography&quot;&gt; &lt;h1 class=&quot;mdc-typography--headline1&quot;&gt;Big header&lt;/h1&gt; &lt;/body&gt; Guidelines In the type scale, headlines span from a range of 1 through 6. Headlines are the largest text on the screen, reserved for short, important text or numerals. Troop 370 typically uses headline scales 4 through 6, which are respectively assigned to &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; in content strips. Use the IBM Plex Sans font for headlines (applied by default in content strips). Body text comes in ranges 1-2, and it’s typically used for long-form writing as it works well for small text sizes. Only use Body 1 on Troop 370 websites. Use the Roboto font for body text (applied by default in content strips). Button text is a call to action used in different types of buttons (such as text, outlined and contained buttons). Button text on Troop 370 websites are automatically capitalized and uses the IBM Plex Sans font. Style customization CSS classes Some components have a set typographic style. For example, an &lt;h1&gt; or &lt;p&gt; within content strips use Headline 4 and Body 1 styles, respectively. If you want to set the typographic style of an element which is not a predefined component, you can apply the following CSS classes. CSS Class Description mdc-typography Sets the font to Roboto mdc-typography--headline1 Sets font properties as Headline 1 mdc-typography--headline2 Sets font properties as Headline 2 mdc-typography--headline3 Sets font properties as Headline 3 mdc-typography--headline4 Sets font properties as Headline 4 mdc-typography--headline5 Sets font properties as Headline 5 mdc-typography--headline6 Sets font properties as Headline 6 mdc-typography--subtitle1 Sets font properties as Subtitle 1 mdc-typography--subtitle2 Sets font properties as Subtitle 2 mdc-typography--body1 Sets font properties as Body 1 mdc-typography--body2 Sets font properties as Body 2 mdc-typography--caption Sets font properties as Caption mdc-typography--button Sets font properties as Button mdc-typography--overline Sets font properties as Overline",
    "url": "/ui-components/typography.html",
    "relUrl": "/ui-components/typography.html"
  },
  "4": {
    "id": "4",
    "title": "UI Components",
    "content": "UI Components ????",
    "url": "/ui-components",
    "relUrl": "/ui-components"
  }
  
}
